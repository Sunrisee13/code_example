{
  "compilerOptions": {
    // Куда собираем (нам не важно, тк у нас сборка вебпаком)
    "outDir": "./dist/",
    // noImplicitAny Подсвечивает места, где не указан тип (неявное any)
    "noImplicitAny": true,
    // Способы модульной сборки (импорты)
    // самые частые ESNexs, es6, commonJS https://www.typescriptlang.org/tsconfig#module
    "module": "ESNext",
    // "target": "es5" В какую спецификацию компилируем
    "target": "es5",
    // "jsx": "react",- позволяет обрабатывать react
    "jsx": "react-jsx",
    "allowJs": true,
    // moduleResolution определяет импорты node/classic, почти всегда юзается node
    "moduleResolution": "node",
    "baseUrl": ".",
    // Автоматическая настройка для путей для абсолютных импортов
    "paths": {
      "*": [
        "./src/*"
      ] // все абсолютные импорты будут идти из папки src
    },
    //"esModuleInterop" позволяет там где require в пактеах
    // поддерживать import export, = common js
    "esModuleInterop": true,
    // esModuleInterop позволяет импортировать библиотеки без * as
    // Если какая-то библиотека не имеет export default
    "allowSyntheticDefaultImports": true,
    "plugins": [
      // Плагин для автокомплита модульных стилей
      {
        "name": "typescript-plugin-css-modules"
      }
    ],
  },
  // Данная настройка нужна, чтобы при "module": "ESNext",
  // поддерживались вебпаком импорты и экспорты
  "ts-node": {
    "compilerOptions": {
      "module": "CommonJS"
    }
  },
  // "include": [
  //   "./config/jest/setupTest.ts" // Добавили это типо для того, чтобы подхватились методы в реакт тестах
  // ], // После этой строчки всё лицо красное, надо будет фиксить
//   Для всех, кто столкнулся с поломкой из-за include в tsconfig.json и решил не городить костыли:
// "include" в tsconfig.json в данной ситуации не нужен вообще. Достаточно прописать setup file в jest config. По умолчанию, tsconfig.json указывает искать все *.ts, *.tsx файлы, поэтому setup file автоматически подхватится.
// А сама проблема возникает из-за того, что screen.findByText() возвращает промис, а мы его expect'им как синхронный вызов. Достаточно добавить await перед вызовом и навесить async на коллбэк в тесте и всё заработает. 
}